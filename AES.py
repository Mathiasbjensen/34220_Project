import numpy as np
from Galois import *
import BitVector as bw

sbox=createSbox()
#state = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34]
state = [0x00, 0x1f, 0x0e, 0x54, 0x3c, 0x4e, 0x08, 0x59, 0x6e, 0x22, 0x1b, 0x0b, 0x47, 0x74, 0x31, 0x1a]
cipherKey = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
#cipherKey = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]



rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

#print(int(0x53,16))
#print(hex(sbox[83]))

def subBytes(state):

    for i in range(len(state)):
        state[i]=sbox[state[i]]
    return state

#print(subBytes(state))


def shiftRows(state):
    # Making the list into a numpy matrix to shift the rows.
    shiftedState=np.reshape(state,(4,4),order='F')
    shiftedState[1] = np.roll(shiftedState[1],-1)
    shiftedState[2] = np.roll(shiftedState[2],-2)
    shiftedState[3] = np.roll(shiftedState[3], -3)
    # Converting the numpy matrix back into a list before returning it.
    shiftedState = np.reshape(shiftedState,(1,16),order='F')
    shiftedState = shiftedState.flatten().tolist()

    return shiftedState


#print(shiftRows([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))

#modulus=bw(bitstring='100011011')

# Galois Multiplication

#print(galoisMult(0x57,0x83))

def rotWord(cipherCol):
    rotated=[]
    rotated=cipherCol[1:]+cipherCol[0:1]
    return rotated
#print(rotWord([0x1d,0x2c,0x3a,0x4f]))

# MAAAAAAAAAAATRIIIIIIIIIIIIIIIIX
print(np.reshape(subBytes(state),(4,4),order='F'))

#print(subBytes(rotWord([0x09, 0xcf,0x4f,0x3c])))
#print(rotWord([0x09, 0xcf,0x4f,0x3c]))
#print(sbox)
#shiftedState = np.reshape(state, (4, 4), order='F')


